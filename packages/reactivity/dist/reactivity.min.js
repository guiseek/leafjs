class t{constructor(){this.activeEffects=[],this.onChange=null,this.isSetting=!1,this.actualState=void 0}getTrackableObject(t,e){for(const n in t)t[n]&&"object"==typeof t[n]&&(t[n]=this.getTrackableObject(t[n],e));const n=this,o=new Proxy(t,{get(t,n,o){const r=Reflect.get(t,n,o);return e.onGet(t,n,o),r},set(t,o,r,s){"object"==typeof r&&(r=n.getTrackableObject(r,e));const i=Reflect.set(t,o,r,s);return e.onSet(t,o,r,s),i},deleteProperty(t,n){const o=Reflect.deleteProperty(t,n);return e.onDeleteProperty(t,n),o}});return Array.isArray(t)&&Object.setPrototypeOf(o,Array.prototype),o}build(t){const e=this,n=()=>{this.isSetting?setTimeout(n,2):this.onChange&&this.onChange()};return this.actualState=this.getTrackableObject(t,{onGet(){},onSet(){e.isSetting||(e.isSetting=!0,n()),e.isSetting=!1},onDeleteProperty(){}}),this.actualState}onStateChange(t){this.onChange=t,t()}}export{t as Reactive};
//# sourceMappingURL=reactivity.min.js.map
