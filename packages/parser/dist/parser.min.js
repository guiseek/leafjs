#!/usr/bin/env node
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@babel/core"),t=require("fs"),r=require("path"),l=require("glob"),n=require("rollup"),o=require("@rollup/plugin-node-resolve"),a=require("@rollup/plugin-commonjs"),i=require("rollup-plugin-terser"),s=require("commander"),u=require("@rollup/plugin-babel"),c=require("@rollup/plugin-inject"),d=require("chalk"),f=require("rollup-plugin-progress"),p=require("express"),g=require("express-ws"),m=require("chokidar"),b=require("open");function y(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var _=y(e),x=y(t),j=y(r),v=y(l),S=y(o),w=y(a),h=y(c),q=y(d),E=y(f),$=y(p),F=y(g),R=y(m),D=y(b);const N={presets:[["@babel/preset-env",{modules:!1,targets:"> 0.25%, not dead"}]],plugins:[["@babel/plugin-transform-react-jsx",{pragma:"___leaf_create_element_react"}]],babelHelpers:"bundled"},O=new s.Command,C=e=>{console.log(`${q.default.cyan("[leafjs]")} - ${q.default.blue("info")} - ${e}`)},T=e=>{console.log(`${q.default.cyan("[leafjs]")} - ${q.default.red("error")} - ${e}`)},k=e=>{var t;return(null===(t=_.default.transformSync((e=>`\n    /** @jsx ___createElement_leaf */\n    import { createElementReactStyle as ___createElement_leaf } from '@leaf-web/core';\n    \n    // user code start\n    ${e};\n    // user code end\n  `)(e),N))||void 0===t?void 0:t.code)||""},L=e=>[".jsx",".tsx"].includes(j.default.extname(e))?e.substring(0,e.length-1):e,J=(e,t)=>{const r=x.default.readFileSync(j.default.resolve(e)).toString(),l=k(r);let n=L(j.default.resolve(t));return x.default.writeFileSync(n,"// NOTE: This file is generated by Leafjs parser. DO NOT EDIT!\n\n"+l),l},I=async(e,t)=>{const r={input:e,plugins:[S.default(),w.default(),u.babel(N),h.default({___leaf_create_element_react:["@leaf-web/core","createElementReactStyle"]}),i.terser(),E.default()]},l={format:"iife",file:j.default.join(t,"bundle.min.js")};let o=null,a=!1;try{o=await n.rollup(r),await o.write(l)}catch(e){a=!0,T(`failed to compile.\n${q.default.gray(e)}`)}o&&await o.close(),a&&process.exit(1)},B=async e=>{const t=JSON.parse(x.default.readFileSync(e).toString());await I(t.entry,t.outputDir)},P=(e,r)=>{const l=JSON.parse(x.default.readFileSync(e).toString()),o={input:l.entry,plugins:[S.default(),w.default(),u.babel(N),h.default({___leaf_create_element_react:["@leaf-web/core","createElementReactStyle"]}),E.default()]},a={format:"iife",file:j.default.join(l.outputDir,"bundle.min.js")},i=n.watch({...o,output:a});let s=null;const c=(e=>{e=j.default.resolve(e);const r=$.default(),l=F.default(r),n=[new RegExp("</body>","i"),new RegExp("</svg>"),new RegExp("</head>","i")];let o=null;const a=t.readFileSync(j.default.join(__dirname,"injected.min.js")).toString(),i=l=>{const s=t.readdirSync(l);for(const u of s){const s=j.default.join(l,u);if(t.statSync(s).isDirectory())i(s);else{if(".html"!==j.default.extname(s))continue;const l=t.readFileSync(s).toString();for(const e of n){const t=e.exec(l);if(t){o=t[0];break}}const i=j.default.parse(j.default.relative(e,s));r.get(j.default.join("/",i.dir,"index"===i.name?"":i.name),((e,t)=>{o?t.send(l.replace(new RegExp(o,"i"),`\n          \x3c!-- code injected by leafjs --\x3e\n          <script>\n              ${a}\n          <\/script>\n      ${o}`)):t.send(l)}))}}};r.use("/",$.default.static(e,{index:!1})),i(e);let s=null;return l.app.ws("/socket",(e=>{s=e})),{start:r.listen,update:()=>{null==s||s.send(JSON.stringify({msg:"reload"}))},error:e=>{null==s||s.send(JSON.stringify({msg:"error",data:e}))},on:l.app.on}})(".");c.start(r,(async()=>{C(`started development server on http://localhost:${r}.`),await D.default(`http://127.0.0.1:${r}/`)})),c.on("error",(e=>{T(`Failed to start development server.\n${q.default.gray(e)}`)}));const d=()=>{process.stdout.moveCursor(0,-1e4),process.stdout.cursorTo(0),process.stdout.clearScreenDown()};let f=!0;i.on("event",(e=>{"START"===e.code?(f=!0,d(),C("building..."),s=null):"END"===e.code?(s?(T("an unexpected error occured while building."),c.error(s.message)):(d(),C("build successful.")),f=!1):"ERROR"===e.code?(T(`failed to build.\n${q.default.gray(e.error)}`),s=e.error):"BUNDLE_END"===e.code&&e.result.close()}));R.default.watch(".",{ignored:["node_modules","**/*.jsx","**/*.tsx"]}).on("all",(()=>{f||s||(C("change detected to filesystem. reloading..."),c.update(),d(),C("waiting for changes..."))}))};O.name("leaf").description("Leafjs helper CLI."),O.command("build").description("Build and bundle a Leafjs application.").option("-c, --config <string>","Config file location.","./leaf.config.json").action((async e=>{C("compiling..."),await B(e.config),C("compiled successfully.")})),O.command("dev").description("Start a development server.").option("-c, --config <string>","Config file location.","./leaf.config.json").option("-p, --port <number>","Port to start the development server.","8080").action((e=>{P(e.config,parseInt(e.port))})),O.parse(),exports.buildFromConfig=B,exports.bundleFiles=I,exports.compileCode=k,exports.compileFile=J,exports.compileFilesWithGlob=(e,t)=>{v.default(e,((e,r)=>{e?T(`failed to match glob files.\n${q.default.gray(e)}`):r.forEach((e=>{const r=j.default.join(t,e),l=j.default.dirname(r);x.default.mkdir(l,{recursive:!0},(t=>{t?console.error(t):J(e,r)}))}))}))},exports.error=T,exports.info=C,exports.startDevServer=P,exports.transformFilename=L;
//# sourceMappingURL=parser.min.js.map
