#!/usr/bin/env node
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var babel = require('@babel/core');
var fs = require('fs');
var path = require('path');
var glob = require('glob');
var rollup = require('rollup');
var nodeResolve = require('@rollup/plugin-node-resolve');
var commonjs = require('@rollup/plugin-commonjs');
var rollupPluginTerser = require('rollup-plugin-terser');
var commander = require('commander');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var babel__default = /*#__PURE__*/_interopDefaultLegacy(babel);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var glob__default = /*#__PURE__*/_interopDefaultLegacy(glob);
var nodeResolve__default = /*#__PURE__*/_interopDefaultLegacy(nodeResolve);
var commonjs__default = /*#__PURE__*/_interopDefaultLegacy(commonjs);

const babelConfig = {
    presets: [['@babel/preset-env', { modules: false }]],
    plugins: ['@babel/plugin-transform-react-jsx'],
};
const program = new commander.Command();
const generateCodeTemplate = (code) => {
    return `
    /** @jsx ___createElement_leaf */
    import { createElementReactStyle as ___createElement_leaf } from '@leaf-web/core';
    
    // user code start
    ${code};
    // user code end
  `;
};
const compileCode = (code) => {
    var _a;
    return ((_a = babel__default["default"].transformSync(generateCodeTemplate(code), babelConfig)) === null || _a === void 0 ? void 0 : _a.code) || '';
};
const transformFilename = (filename) => {
    const JSXExtensions = ['.jsx', '.tsx'];
    // transform file extension
    if (JSXExtensions.includes(path__default["default"].extname(filename))) {
        return filename.substring(0, filename.length - 1);
    }
    return filename;
};
const compileFile = (filePath, outputPath) => {
    const code = fs__default["default"].readFileSync(path__default["default"].resolve(filePath)).toString();
    const result = compileCode(code);
    let absOutputPath = transformFilename(path__default["default"].resolve(outputPath));
    fs__default["default"].writeFileSync(absOutputPath, '// NOTE: This file is generated by Leafjs parser. DO NOT EDIT!\n\n' + result);
    return result;
};
const compileFilesWithGlob = (pattern, outputDir) => {
    glob__default["default"](pattern, (err, matches) => {
        if (err) {
            console.error(err);
            return;
        }
        matches.forEach((match) => {
            const currentPath = path__default["default"].join(outputDir, match);
            const currentOutputDir = path__default["default"].dirname(currentPath);
            fs__default["default"].mkdir(currentOutputDir, { recursive: true }, (err) => {
                if (err) {
                    console.error(err);
                    return;
                }
                compileFile(match, currentPath);
            });
        });
    });
};
const bundleFiles = async (entry) => {
    const inputOptions = {
        input: entry,
        plugins: [nodeResolve__default["default"](), commonjs__default["default"](), rollupPluginTerser.terser()],
    };
    const outputOptions = {
        format: 'iife',
        file: './build/bundle.min.js',
    };
    let bundle = null;
    try {
        bundle = await rollup.rollup(inputOptions);
        await bundle.write(outputOptions);
    }
    catch (err) {
        console.error(err);
    }
    if (bundle) {
        await bundle.close();
    }
};
const buildFromConfig = async (configPath) => {
    const configContent = JSON.parse(fs__default["default"].readFileSync(configPath).toString());
    compileFilesWithGlob(configContent.toBundle, configContent.outputDir);
    await bundleFiles(transformFilename(path__default["default"].join(configContent.outputDir, configContent.entry)));
};
program.name('leaf').description('Leafjs helper CLI.');
program
    .command('build')
    .description('Build and bundle a Leafjs application.')
    .option('-c, --config <string>', 'Config file location.', './leaf.config.js')
    .action(async (options) => {
    await buildFromConfig(options.config);
});
program.parse();

exports.buildFromConfig = buildFromConfig;
exports.bundleFiles = bundleFiles;
exports.compileCode = compileCode;
exports.compileFile = compileFile;
exports.compileFilesWithGlob = compileFilesWithGlob;
exports.transformFilename = transformFilename;
//# sourceMappingURL=parser.js.map
